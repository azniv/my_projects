
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  0000042e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000095  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c0  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b2  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044e  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000156  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c6  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	7a c0       	rjmp	.+244    	; 0xfc <__vector_3>
   8:	8d c0       	rjmp	.+282    	; 0x124 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	52 c0       	rjmp	.+164    	; 0xc0 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e9       	ldi	r30, 0x90	; 144
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 31       	cpi	r26, 0x10	; 16
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	c0 d0       	rcall	.+384    	; 0x1e8 <main>
  68:	91 c1       	rjmp	.+802    	; 0x38c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_16>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Прерывания от таймеров
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Прерывание срабатывает 1 раз в секунду
ISR(TIMER0_OVF_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
    static uint8_t t0;
    static uint8_t t3sec;
    
    if (!(t0--)) {
  78:	80 91 0f 01 	lds	r24, 0x010F
  7c:	81 50       	subi	r24, 0x01	; 1
  7e:	80 93 0f 01 	sts	0x010F, r24
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	b9 f4       	brne	.+46     	; 0xb4 <__vector_16+0x48>
        t0 = (F_CPU/1024/256)&0xFF;
  86:	8d e3       	ldi	r24, 0x3D	; 61
  88:	80 93 0f 01 	sts	0x010F, r24
        cli();
  8c:	f8 94       	cli
        //Подаем отрицательные импульсы длительностью 10 мкс с частотой 3 с
        if (!(t3sec--)) {
  8e:	80 91 0e 01 	lds	r24, 0x010E
  92:	81 50       	subi	r24, 0x01	; 1
  94:	80 93 0e 01 	sts	0x010E, r24
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	41 f4       	brne	.+16     	; 0xac <__vector_16+0x40>
            PORTC &= ~(1<<4);
  9c:	44 98       	cbi	0x08, 4	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9e:	85 e3       	ldi	r24, 0x35	; 53
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <__vector_16+0x34>
            _delay_us(10);
            PORTC |= (1<<4);        
  a4:	44 9a       	sbi	0x08, 4	; 8
            t3sec = 2;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 0e 01 	sts	0x010E, r24
        }
        sei();
  ac:	78 94       	sei
        stage_of_count = 2;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	80 93 0d 01 	sts	0x010D, r24
    }
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_13>:

// Прерывание срабатывает через 32 мс при 16MHz либо через 43мс при 12MHz после прихода первого импульса
ISR(TIMER1_OVF_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
    if ((stage_of_count==1) && BUTTON_CTRL_IS_RELEASED) {
  d0:	20 91 0d 01 	lds	r18, 0x010D
  d4:	21 30       	cpi	r18, 0x01	; 1
  d6:	51 f4       	brne	.+20     	; 0xec <__vector_13+0x2c>
  d8:	18 9b       	sbis	0x03, 0	; 3
  da:	08 c0       	rjmp	.+16     	; 0xec <__vector_13+0x2c>
        pulses = 999;
  dc:	87 ee       	ldi	r24, 0xE7	; 231
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	90 93 0b 01 	sts	0x010B, r25
  e4:	80 93 0a 01 	sts	0x010A, r24
        overflow_flag = 1;
  e8:	20 93 0c 01 	sts	0x010C, r18
    }
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_3>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Прерывания от PCINT (кнопки, импульсы)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Нажата кнопка "Контроль"
ISR(PCINT0_vect) {
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
    if (BUTTON_CTRL_IS_PRESSED) {
 106:	18 99       	sbic	0x03, 0	; 3
 108:	08 c0       	rjmp	.+16     	; 0x11a <__vector_3+0x1e>
        pulses = 0;
 10a:	10 92 0b 01 	sts	0x010B, r1
 10e:	10 92 0a 01 	sts	0x010A, r1
        overflow_flag = 0;
 112:	10 92 0c 01 	sts	0x010C, r1
        stage_of_count = 0;
 116:	10 92 0d 01 	sts	0x010D, r1
    }
}    
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_4>:

// Подсчет количества импульсов длительностью 10 мкс от T3(контакта1)
ISR(PCINT1_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
    // все импульсы обрабатываем по падающему фронту
    if (~PINC & (1<<3)) {
 13e:	33 99       	sbic	0x06, 3	; 6
 140:	46 c0       	rjmp	.+140    	; 0x1ce <__vector_4+0xaa>
        
        // Старт нового отсчета 
        if (stage_of_count && BUTTON_CTRL_IS_RELEASED) {
 142:	80 91 0d 01 	lds	r24, 0x010D
 146:	88 23       	and	r24, r24
 148:	b9 f1       	breq	.+110    	; 0x1b8 <__vector_4+0x94>
 14a:	18 9b       	sbis	0x03, 0	; 3
 14c:	35 c0       	rjmp	.+106    	; 0x1b8 <__vector_4+0x94>
            if (stage_of_count == 2) {
 14e:	80 91 0d 01 	lds	r24, 0x010D
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	59 f4       	brne	.+22     	; 0x16c <__vector_4+0x48>
                TCNT1 = 0;
 156:	10 92 85 00 	sts	0x0085, r1
 15a:	10 92 84 00 	sts	0x0084, r1
                pulses = 0 ;    
 15e:	10 92 0b 01 	sts	0x010B, r1
 162:	10 92 0a 01 	sts	0x010A, r1
                overflow_flag = 0;
 166:	10 92 0c 01 	sts	0x010C, r1
 16a:	1f c0       	rjmp	.+62     	; 0x1aa <__vector_4+0x86>
            }
            else {
                pulses = TCNT1/((F_CPU/800000)&0xFF);  // 800000 = (число тиков в интервале в 10 мкс) x (делитель таймера на 8)
 16c:	80 91 84 00 	lds	r24, 0x0084
 170:	90 91 85 00 	lds	r25, 0x0085
 174:	64 e1       	ldi	r22, 0x14	; 20
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	f5 d0       	rcall	.+490    	; 0x364 <__udivmodhi4>
 17a:	70 93 0b 01 	sts	0x010B, r23
 17e:	60 93 0a 01 	sts	0x010A, r22
                if ((pulses > 999) || overflow_flag) {
 182:	80 91 0a 01 	lds	r24, 0x010A
 186:	90 91 0b 01 	lds	r25, 0x010B
 18a:	88 5e       	subi	r24, 0xE8	; 232
 18c:	93 40       	sbci	r25, 0x03	; 3
 18e:	20 f4       	brcc	.+8      	; 0x198 <__vector_4+0x74>
 190:	80 91 0c 01 	lds	r24, 0x010C
 194:	88 23       	and	r24, r24
 196:	49 f0       	breq	.+18     	; 0x1aa <__vector_4+0x86>
                    pulses = 999;
 198:	87 ee       	ldi	r24, 0xE7	; 231
 19a:	93 e0       	ldi	r25, 0x03	; 3
 19c:	90 93 0b 01 	sts	0x010B, r25
 1a0:	80 93 0a 01 	sts	0x010A, r24
                    overflow_flag = 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 0c 01 	sts	0x010C, r24
                }                
            }

            if (--stage_of_count);
 1aa:	80 91 0d 01 	lds	r24, 0x010D
 1ae:	81 50       	subi	r24, 0x01	; 1
 1b0:	80 93 0d 01 	sts	0x010D, r24
 1b4:	80 91 0d 01 	lds	r24, 0x010D
        }
        
        //Подсчет контрольных имульсов при нажатой кнопке "Контроль"
        if (BUTTON_CTRL_IS_PRESSED) {
 1b8:	18 99       	sbic	0x03, 0	; 3
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <__vector_4+0xaa>
            pulses++;
 1bc:	80 91 0a 01 	lds	r24, 0x010A
 1c0:	90 91 0b 01 	lds	r25, 0x010B
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 0b 01 	sts	0x010B, r25
 1ca:	80 93 0a 01 	sts	0x010A, r24
        }
    }
}    
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <main>:
// Инициализация
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void init(void) {

    DDRD  = 0xFF;     
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0xFF;
 1ec:	8b b9       	out	0x0b, r24	; 11

    // Аноды индикатора и вывод для сигнала "3сек"
    DDRC  = (1<<DIG_HI)|(1<<DIG_MD)|(1<<DIG_LO)|(1<<4);
 1ee:	87 e1       	ldi	r24, 0x17	; 23
 1f0:	87 b9       	out	0x07, r24	; 7
    
    // Вход импульсов подтянут к питанию для защиты от помех и выход 
    // для подсчета отрицательных импульсов с частотой 3 с
    PORTC = (1<<4);  
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	88 b9       	out	0x08, r24	; 8
    
    // Подтягиваем кнопку "Контроль" 
    DDRB &= ~(1<<0);        
 1f6:	20 98       	cbi	0x04, 0	; 4
    PORTB |= (1<<0);    
 1f8:	28 9a       	sbi	0x05, 0	; 5
    
    TIMSK0 |= (1<<TOIE0);
 1fa:	80 91 6e 00 	lds	r24, 0x006E
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	80 93 6e 00 	sts	0x006E, r24
    TIMSK1 |= (1<<TOIE1);
 204:	80 91 6f 00 	lds	r24, 0x006F
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 93 6f 00 	sts	0x006F, r24
    
    //Выбор частоты синхронизации TIMER0 с предделителем  1024 
    TCCR0B  = (1<<CS02)|(1<<CS00);
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	85 bd       	out	0x25, r24	; 37
    
    //Выбор частоты синхронизации TIMER1 с предделителем 8
    TCCR1B  = (1<<CS11);
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 81 00 	sts	0x0081, r24
    
    PCICR  |= (1<<PCIE1)|(1<<PCIE0);
 218:	80 91 68 00 	lds	r24, 0x0068
 21c:	83 60       	ori	r24, 0x03	; 3
 21e:	80 93 68 00 	sts	0x0068, r24
    PCMSK0 |= (1<<PCINT0);
 222:	80 91 6b 00 	lds	r24, 0x006B
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 93 6b 00 	sts	0x006B, r24
    PCMSK1 |= (1<<PCINT11)|(1<<PCINT12);
 22c:	80 91 6c 00 	lds	r24, 0x006C
 230:	88 61       	ori	r24, 0x18	; 24
 232:	80 93 6c 00 	sts	0x006C, r24
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void) {
    init();
    
    if (BUTTON_CTRL_IS_PRESSED)
 236:	18 99       	sbic	0x03, 0	; 3
 238:	50 c0       	rjmp	.+160    	; 0x2da <main+0xf2>
// Самоконтроль индикаторов
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline static void self_test(void) {
    // Зажгли все разряды
    PORTC &= ~((1<<DIG_HI)|(1<<DIG_MD)|(1<<DIG_LO));
 23a:	88 b1       	in	r24, 0x08	; 8
 23c:	88 7f       	andi	r24, 0xF8	; 248
 23e:	88 b9       	out	0x08, r24	; 8
 240:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 242:	40 e9       	ldi	r20, 0x90	; 144
 244:	51 e0       	ldi	r21, 0x01	; 1
    while(i){
        i--;
        PORTD = numbers[i];
        _delay_ms(300);
        
        PORTD |=0xFF;
 246:	3f ef       	ldi	r19, 0xFF	; 255
    PORTC &= ~((1<<DIG_HI)|(1<<DIG_MD)|(1<<DIG_LO));
    
    // Вывели цифры от 9 до 0
    uint8_t i = 10;
    while(i){
        i--;
 248:	21 50       	subi	r18, 0x01	; 1
        PORTD = numbers[i];
 24a:	e2 2f       	mov	r30, r18
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	e0 50       	subi	r30, 0x00	; 0
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	80 81       	ld	r24, Z
 254:	8b b9       	out	0x0b, r24	; 11
 256:	88 eb       	ldi	r24, 0xB8	; 184
 258:	9b e0       	ldi	r25, 0x0B	; 11
 25a:	fa 01       	movw	r30, r20
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x74>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 260:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 262:	d9 f7       	brne	.-10     	; 0x25a <main+0x72>
        _delay_ms(300);
        
        PORTD |=0xFF;
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	3b b9       	out	0x0b, r19	; 11
 268:	88 eb       	ldi	r24, 0xB8	; 184
 26a:	9b e0       	ldi	r25, 0x0B	; 11
 26c:	fa 01       	movw	r30, r20
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 272:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0x84>
    // Зажгли все разряды
    PORTC &= ~((1<<DIG_HI)|(1<<DIG_MD)|(1<<DIG_LO));
    
    // Вывели цифры от 9 до 0
    uint8_t i = 10;
    while(i){
 276:	22 23       	and	r18, r18
 278:	39 f7       	brne	.-50     	; 0x248 <main+0x60>
        PORTD |=0xFF;
        _delay_ms(300);    
    }    

    // Погасили все разряды            
    PORTC |= ((1<<DIG_HI)|(1<<DIG_MD)|(1<<DIG_LO));
 27a:	88 b1       	in	r24, 0x08	; 8
 27c:	87 60       	ori	r24, 0x07	; 7
 27e:	88 b9       	out	0x08, r24	; 8

    // Отобразили тире и точку
    PORTD &= ~((1<<SEG_G)|(1<<SEG_DP));
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	8b 7e       	andi	r24, 0xEB	; 235
 284:	8b b9       	out	0x0b, r24	; 11
    
    PORTC &= ~(1<<DIG_HI);            
 286:	42 98       	cbi	0x08, 2	; 8
 288:	80 ed       	ldi	r24, 0xD0	; 208
 28a:	97 e0       	ldi	r25, 0x07	; 7
 28c:	20 e9       	ldi	r18, 0x90	; 144
 28e:	31 e0       	ldi	r19, 0x01	; 1
 290:	f9 01       	movw	r30, r18
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 296:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 298:	d9 f7       	brne	.-10     	; 0x290 <main+0xa8>
    _delay_ms(200);
    PORTC |=(1<<DIG_HI);
 29a:	42 9a       	sbi	0x08, 2	; 8
        
    PORTC &= ~(1<<DIG_MD);
 29c:	41 98       	cbi	0x08, 1	; 8
 29e:	80 ed       	ldi	r24, 0xD0	; 208
 2a0:	97 e0       	ldi	r25, 0x07	; 7
 2a2:	20 e9       	ldi	r18, 0x90	; 144
 2a4:	31 e0       	ldi	r19, 0x01	; 1
 2a6:	f9 01       	movw	r30, r18
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <main+0xbe>
    _delay_ms(200);
    PORTC |= (1<<DIG_MD);
 2b0:	41 9a       	sbi	0x08, 1	; 8
    
    PORTC &= ~(1<<DIG_LO);    
 2b2:	40 98       	cbi	0x08, 0	; 8
 2b4:	80 ed       	ldi	r24, 0xD0	; 208
 2b6:	97 e0       	ldi	r25, 0x07	; 7
 2b8:	20 e9       	ldi	r18, 0x90	; 144
 2ba:	31 e0       	ldi	r19, 0x01	; 1
 2bc:	f9 01       	movw	r30, r18
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <main+0xd4>
    _delay_ms(200);
    PORTC |= (1<<DIG_LO);
 2c6:	40 9a       	sbi	0x08, 0	; 8
 2c8:	88 eb       	ldi	r24, 0xB8	; 184
 2ca:	9b e0       	ldi	r25, 0x0B	; 11
 2cc:	20 e9       	ldi	r18, 0x90	; 144
 2ce:	31 e0       	ldi	r19, 0x01	; 1
 2d0:	f9 01       	movw	r30, r18
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d8:	d9 f7       	brne	.-10     	; 0x2d0 <main+0xe8>
    init();
    
    if (BUTTON_CTRL_IS_PRESSED)
        self_test();

    sei();
 2da:	78 94       	sei
 2dc:	20 e2       	ldi	r18, 0x20	; 32
 2de:	3e e4       	ldi	r19, 0x4E	; 78

inline static void indication(void) {

    //старший разряд числа 
    
    PORTD = numbers[pulses%1000/100];  
 2e0:	80 91 0a 01 	lds	r24, 0x010A
 2e4:	90 91 0b 01 	lds	r25, 0x010B
 2e8:	68 ee       	ldi	r22, 0xE8	; 232
 2ea:	73 e0       	ldi	r23, 0x03	; 3
 2ec:	3b d0       	rcall	.+118    	; 0x364 <__udivmodhi4>
 2ee:	64 e6       	ldi	r22, 0x64	; 100
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	38 d0       	rcall	.+112    	; 0x364 <__udivmodhi4>
 2f4:	fb 01       	movw	r30, r22
 2f6:	e0 50       	subi	r30, 0x00	; 0
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	80 81       	ld	r24, Z
 2fc:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(overflow_flag<<SEG_DP);
 2fe:	9b b1       	in	r25, 0x0b	; 11
 300:	80 91 0c 01 	lds	r24, 0x010C
 304:	88 0f       	add	r24, r24
 306:	88 0f       	add	r24, r24
 308:	80 95       	com	r24
 30a:	89 23       	and	r24, r25
 30c:	8b b9       	out	0x0b, r24	; 11
    PORTC &= ~(1<<DIG_HI);            
 30e:	42 98       	cbi	0x08, 2	; 8
 310:	c9 01       	movw	r24, r18
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <__stack+0x13>
    _delay_ms(MS);
    PORTC |=(1<<DIG_HI);
 316:	42 9a       	sbi	0x08, 2	; 8
    
    //средний разряд числа 
    PORTD = numbers[pulses%100/10];    
 318:	80 91 0a 01 	lds	r24, 0x010A
 31c:	90 91 0b 01 	lds	r25, 0x010B
 320:	64 e6       	ldi	r22, 0x64	; 100
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	1f d0       	rcall	.+62     	; 0x364 <__udivmodhi4>
 326:	6a e0       	ldi	r22, 0x0A	; 10
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	1c d0       	rcall	.+56     	; 0x364 <__udivmodhi4>
 32c:	fb 01       	movw	r30, r22
 32e:	e0 50       	subi	r30, 0x00	; 0
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
 334:	8b b9       	out	0x0b, r24	; 11
    PORTC &= ~(1<<DIG_MD);
 336:	41 98       	cbi	0x08, 1	; 8
 338:	c9 01       	movw	r24, r18
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <__stack+0x3b>
    _delay_ms(MS);
    PORTC |= (1<<DIG_MD);
 33e:	41 9a       	sbi	0x08, 1	; 8

    //младший разряд числа 
    PORTD = numbers[pulses % 10];    
 340:	80 91 0a 01 	lds	r24, 0x010A
 344:	90 91 0b 01 	lds	r25, 0x010B
 348:	6a e0       	ldi	r22, 0x0A	; 10
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	0b d0       	rcall	.+22     	; 0x364 <__udivmodhi4>
 34e:	fc 01       	movw	r30, r24
 350:	e0 50       	subi	r30, 0x00	; 0
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	80 81       	ld	r24, Z
 356:	8b b9       	out	0x0b, r24	; 11
    //вывод точки при переполнении
     PORTC &= ~(1<<DIG_LO);    
 358:	40 98       	cbi	0x08, 0	; 8
 35a:	c9 01       	movw	r24, r18
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <__stack+0x5d>
    _delay_ms(MS);
    PORTC |= (1<<DIG_LO);
 360:	40 9a       	sbi	0x08, 0	; 8
 362:	be cf       	rjmp	.-132    	; 0x2e0 <main+0xf8>

00000364 <__udivmodhi4>:
 364:	aa 1b       	sub	r26, r26
 366:	bb 1b       	sub	r27, r27
 368:	51 e1       	ldi	r21, 0x11	; 17
 36a:	07 c0       	rjmp	.+14     	; 0x37a <__udivmodhi4_ep>

0000036c <__udivmodhi4_loop>:
 36c:	aa 1f       	adc	r26, r26
 36e:	bb 1f       	adc	r27, r27
 370:	a6 17       	cp	r26, r22
 372:	b7 07       	cpc	r27, r23
 374:	10 f0       	brcs	.+4      	; 0x37a <__udivmodhi4_ep>
 376:	a6 1b       	sub	r26, r22
 378:	b7 0b       	sbc	r27, r23

0000037a <__udivmodhi4_ep>:
 37a:	88 1f       	adc	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	5a 95       	dec	r21
 380:	a9 f7       	brne	.-22     	; 0x36c <__udivmodhi4_loop>
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	bc 01       	movw	r22, r24
 388:	cd 01       	movw	r24, r26
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
