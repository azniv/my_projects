
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a6  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004e3  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e4  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003dd  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000166  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000168  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	cf c0       	rjmp	.+414    	; 0x1e2 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
	return (uint16_t)ADC;
	
}*/

int main(void)
{
  46:	0f 93       	push	r16
  48:	1f 93       	push	r17
  4a:	cf 93       	push	r28
  4c:	df 93       	push	r29
	uint16_t adc_value;
	uint8_t a;
	LCD_init();
  4e:	6f d0       	rcall	.+222    	; 0x12e <LCD_init>
    
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(ADPS1)|(ADPS0);
  50:	80 91 7a 00 	lds	r24, 0x007A
  54:	85 68       	ori	r24, 0x85	; 133
  56:	80 93 7a 00 	sts	0x007A, r24
	ADMUX  |=(1<<REFS1)|(1<<REFS0)|(1<<MUX1)|(1<<MUX0); //внутреннее Uоп = 1,1 В
  5a:	80 91 7c 00 	lds	r24, 0x007C
  5e:	83 6c       	ori	r24, 0xC3	; 195
  60:	80 93 7c 00 	sts	0x007C, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  64:	c8 ec       	ldi	r28, 0xC8	; 200
  66:	d0 e0       	ldi	r29, 0x00	; 0
    
    /* Replace with your application code */
    while (1) 
    {
		 ADCSRA |= (1<<ADSC);
  68:	80 91 7a 00 	lds	r24, 0x007A
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	80 93 7a 00 	sts	0x007A, r24
		 while (~ADCSRA & (1<<ADIF));   
  72:	80 91 7a 00 	lds	r24, 0x007A
  76:	84 ff       	sbrs	r24, 4
  78:	fc cf       	rjmp	.-8      	; 0x72 <main+0x2c>

 
		adc_value = ADC; 
  7a:	00 91 78 00 	lds	r16, 0x0078
  7e:	10 91 79 00 	lds	r17, 0x0079
		//adc_value *= 137;
		adc_value >>=3;
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	16 95       	lsr	r17
  86:	07 95       	ror	r16
  88:	8a 95       	dec	r24
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x3e>
	    LCD_gotoXY(0,0);
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	79 d0       	rcall	.+242    	; 0x184 <LCD_gotoXY>
		LCD_send_data(adc_value/1000+'0');
  92:	c8 01       	movw	r24, r16
  94:	68 ee       	ldi	r22, 0xE8	; 232
  96:	73 e0       	ldi	r23, 0x03	; 3
  98:	90 d0       	rcall	.+288    	; 0x1ba <__udivmodhi4>
  9a:	86 2f       	mov	r24, r22
  9c:	80 5d       	subi	r24, 0xD0	; 208
  9e:	41 d0       	rcall	.+130    	; 0x122 <LCD_send_data>
		LCD_send_data((adc_value%1000)/100+'0');
  a0:	c8 01       	movw	r24, r16
  a2:	68 ee       	ldi	r22, 0xE8	; 232
  a4:	73 e0       	ldi	r23, 0x03	; 3
  a6:	89 d0       	rcall	.+274    	; 0x1ba <__udivmodhi4>
  a8:	64 e6       	ldi	r22, 0x64	; 100
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	86 d0       	rcall	.+268    	; 0x1ba <__udivmodhi4>
  ae:	86 2f       	mov	r24, r22
  b0:	80 5d       	subi	r24, 0xD0	; 208
  b2:	37 d0       	rcall	.+110    	; 0x122 <LCD_send_data>
		LCD_send_data((adc_value%100)/10+'0');
  b4:	c8 01       	movw	r24, r16
  b6:	64 e6       	ldi	r22, 0x64	; 100
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	7f d0       	rcall	.+254    	; 0x1ba <__udivmodhi4>
  bc:	6a e0       	ldi	r22, 0x0A	; 10
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	7c d0       	rcall	.+248    	; 0x1ba <__udivmodhi4>
  c2:	86 2f       	mov	r24, r22
  c4:	80 5d       	subi	r24, 0xD0	; 208
  c6:	2d d0       	rcall	.+90     	; 0x122 <LCD_send_data>
		LCD_send_data(adc_value%10+'0');
  c8:	c8 01       	movw	r24, r16
  ca:	6a e0       	ldi	r22, 0x0A	; 10
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	75 d0       	rcall	.+234    	; 0x1ba <__udivmodhi4>
  d0:	80 5d       	subi	r24, 0xD0	; 208
  d2:	27 d0       	rcall	.+78     	; 0x122 <LCD_send_data>
  d4:	88 e8       	ldi	r24, 0x88	; 136
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	fe 01       	movw	r30, r28
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x92>
  e2:	c2 cf       	rjmp	.-124    	; 0x68 <main+0x22>

000000e4 <enable>:
#include "LCD_interface.h"
//////////////////////////////////////////////////////////////
//разрешаем обращения к дисплею
//////////////////////////////////////////////////////////////
 void enable(void) {
	PORT_MNG |= (1<<EN_PIN);
  e4:	28 9a       	sbi	0x05, 0	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <enable+0x4>
	_delay_us(2);
	PORT_MNG &= ~(1<<EN_PIN);
  ec:	28 98       	cbi	0x05, 0	; 5
  ee:	8a e6       	ldi	r24, 0x6A	; 106
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <enable+0xc>
	_delay_us(40);
}
  f4:	08 95       	ret

000000f6 <entering_data_or_command>:

//////////////////////////////////////////////////////////////
//функция ввода данных или команд
//на вход подаем символ или команду
//////////////////////////////////////////////////////////////
void entering_data_or_command(uint8_t intering) {
  f6:	1f 93       	push	r17
  f8:	18 2f       	mov	r17, r24
	#if (IS_8_WIRES)
		PORT_LCD = intering;
		enable();
	#else
		PORT_LCD &= 0x0F;
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	8b b9       	out	0x0b, r24	; 11
		PORT_LCD |= (intering & 0xF0);
 100:	9b b1       	in	r25, 0x0b	; 11
 102:	81 2f       	mov	r24, r17
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	89 2b       	or	r24, r25
 108:	8b b9       	out	0x0b, r24	; 11
		enable();
 10a:	ec df       	rcall	.-40     	; 0xe4 <enable>
		PORT_LCD &= 0x0F;
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	8b b9       	out	0x0b, r24	; 11
		PORT_LCD |= (intering << 4);
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	12 95       	swap	r17
 116:	10 7f       	andi	r17, 0xF0	; 240
 118:	81 2b       	or	r24, r17
 11a:	8b b9       	out	0x0b, r24	; 11
		enable();
 11c:	e3 df       	rcall	.-58     	; 0xe4 <enable>
	#endif
}
 11e:	1f 91       	pop	r17
 120:	08 95       	ret

00000122 <LCD_send_data>:
//////////////////////////////////////////////////////////////
//ввод данных 
//////////////////////////////////////////////////////////////
void LCD_send_data(uint8_t symbol) {
	//чтобы подавать данные, выставляем RS = 1 
	PORT_MNG |= (1<<RS_PIN);
 122:	29 9a       	sbi	0x05, 1	; 5
	entering_data_or_command(symbol);
 124:	e8 df       	rcall	.-48     	; 0xf6 <entering_data_or_command>
}
 126:	08 95       	ret

00000128 <LCD_send_cmd>:
//////////////////////////////////////////////////////////////
//ввод команд
//////////////////////////////////////////////////////////////
void LCD_send_cmd(uint8_t cmd) {
	//чтобы подавать команды, выставляем RS = 0 
	PORT_MNG &= ~(1<<RS_PIN);
 128:	29 98       	cbi	0x05, 1	; 5
	entering_data_or_command(cmd);	
 12a:	e5 df       	rcall	.-54     	; 0xf6 <entering_data_or_command>
}
 12c:	08 95       	ret

0000012e <LCD_init>:

	#if (IS_8_WIRES)
		PORT_LCD = 0;
		DDR_LCD  = 0xFF;
	#else
		PORT_LCD &= 0x0F;
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	8b b9       	out	0x0b, r24	; 11
		DDR_LCD  |= 0xF0;
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	80 6f       	ori	r24, 0xF0	; 240
 138:	8a b9       	out	0x0a, r24	; 10
	#endif
 
	DDR_MNG |= (1<<RS_PIN)|(1<<EN_PIN);
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	84 b9       	out	0x04, r24	; 4
	PORT_MNG &= ~(1<<RS_PIN)|(1<<EN_PIN);
 140:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	95 e7       	ldi	r25, 0x75	; 117
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_init+0x18>
	//на железе
    _delay_ms(15);
    LCD_send_cmd(CMD_INIT);
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	ed df       	rcall	.-38     	; 0x128 <LCD_send_cmd>
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	9f e1       	ldi	r25, 0x1F	; 31
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_init+0x24>
    _delay_ms(4);
    LCD_send_cmd(CMD_INIT);
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	e7 df       	rcall	.-50     	; 0x128 <LCD_send_cmd>
 15a:	88 ec       	ldi	r24, 0xC8	; 200
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_init+0x30>
    _delay_us(100);
	LCD_send_cmd(0b00000011);
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	e1 df       	rcall	.-62     	; 0x128 <LCD_send_cmd>
	LCD_send_cmd(0b00000010);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	df df       	rcall	.-66     	; 0x128 <LCD_send_cmd>
    //LCD_send_cmd(CMD_SET_INTERFACE);
	LCD_send_cmd(CMD_SET_PARAMETRS);
 16a:	8c e2       	ldi	r24, 0x2C	; 44
 16c:	dd df       	rcall	.-70     	; 0x128 <LCD_send_cmd>
	LCD_send_cmd(CMD_DISPLAY_OFF);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	db df       	rcall	.-74     	; 0x128 <LCD_send_cmd>
	LCD_send_cmd(CMD_DISPLAY_CLEAR);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	d9 df       	rcall	.-78     	; 0x128 <LCD_send_cmd>
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	97 e2       	ldi	r25, 0x27	; 39
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_init+0x4c>
	_delay_ms(5);
	LCD_send_cmd(CMD_ENTRY_MODE_SET);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	d3 df       	rcall	.-90     	; 0x128 <LCD_send_cmd>
		
}
 182:	08 95       	ret

00000184 <LCD_gotoXY>:
//row - номер строки (0 или 1) 
//////////////////////////////////////////////////////////////
void LCD_gotoXY(uint8_t col, uint8_t row){
    uint8_t adr;
	
    adr=0x40*row+col;
 184:	62 95       	swap	r22
 186:	66 0f       	add	r22, r22
 188:	66 0f       	add	r22, r22
 18a:	60 7c       	andi	r22, 0xC0	; 192
 18c:	68 0f       	add	r22, r24
    adr|=0x80;
    LCD_send_cmd(adr);
 18e:	86 2f       	mov	r24, r22
 190:	80 68       	ori	r24, 0x80	; 128
 192:	ca df       	rcall	.-108    	; 0x128 <LCD_send_cmd>
}
 194:	08 95       	ret

00000196 <LCD_putstring>:

//////////////////////////////////////////////////////////////
//преобразование данных в строку для вывод на экран 
//////////////////////////////////////////////////////////////
void LCD_putstring (uint8_t* s){
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <LCD_putstring+0x10>
    for (uint8_t i=0; s[i]; i++)
	    LCD_send_data(s[i]);
 1a2:	bf df       	rcall	.-130    	; 0x122 <LCD_send_data>

//////////////////////////////////////////////////////////////
//преобразование данных в строку для вывод на экран 
//////////////////////////////////////////////////////////////
void LCD_putstring (uint8_t* s){
    for (uint8_t i=0; s[i]; i++)
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	fe 01       	movw	r30, r28
 1a8:	e1 0f       	add	r30, r17
 1aa:	f1 1d       	adc	r31, r1
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	c1 f7       	brne	.-16     	; 0x1a2 <LCD_putstring+0xc>
	    LCD_send_data(s[i]);
}	
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	08 95       	ret

000001ba <__udivmodhi4>:
 1ba:	aa 1b       	sub	r26, r26
 1bc:	bb 1b       	sub	r27, r27
 1be:	51 e1       	ldi	r21, 0x11	; 17
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <__udivmodhi4_ep>

000001c2 <__udivmodhi4_loop>:
 1c2:	aa 1f       	adc	r26, r26
 1c4:	bb 1f       	adc	r27, r27
 1c6:	a6 17       	cp	r26, r22
 1c8:	b7 07       	cpc	r27, r23
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <__udivmodhi4_ep>
 1cc:	a6 1b       	sub	r26, r22
 1ce:	b7 0b       	sbc	r27, r23

000001d0 <__udivmodhi4_ep>:
 1d0:	88 1f       	adc	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	5a 95       	dec	r21
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <__udivmodhi4_loop>
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
